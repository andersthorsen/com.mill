const { expect } = require('chai');

const homey = require('./../mock/homey');

global.Homey = homey;

const mock = require('mock-require');

mock('homey', homey);

homey.env = {};
homey.env.SENTRY_DSN = 'https://3474e68f802c435db291e7c489a7f0ea:68807e44cccf4dfe8195e99920abf0c5@sentry.io/1321923';

//process.env.SENTRY_DSN = 'https://3474e68f802c435db291e7c489a7f0ea:68807e44cccf4dfe8195e99920abf0c5@sentry.io/1321923';
const Log = require('../../../lib/log');

describe('log', () => {

  it('should log an error', () => {
    try {
      throw new Error('This is an error generated by a test');
    } catch (e) {
      const eventId = Log.captureException(e);
      // eslint-disable-next-line no-unused-expressions
      expect(eventId).to.exist;
    }
  });

  it('should not log two equal errors', () => {
    try {
      throw new Error('This is an error generated by a test #1');
    } catch (e) {
      const eventId = Log.captureException(e);
      // eslint-disable-next-line no-unused-expressions
      expect(eventId).to.exist;
    }

    try {
      throw new Error('This is an error generated by a test #2');
    } catch (e) {
      const eventId = Log.captureException(e);
      // eslint-disable-next-line no-unused-expressions
      expect(eventId).to.exist;
    }

    try {
      throw new Error('This is an error generated by a test #2');
    } catch (e) {
      const eventId = Log.captureException(e);
      // eslint-disable-next-line no-unused-expressions
      expect(eventId).to.be.null;
    }
  });
});
